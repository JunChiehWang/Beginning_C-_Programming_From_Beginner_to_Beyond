In this video we'll talk more about the default constructor.

A default constructor is a constructor that doesn't expect any arguments.

It's also called a no args constructor C++ has to have a way to construct an initialize objects if you

don't provide any initialization information at all.

So if you don't provide any constructors at all C++ will generate a default constructor automatically.

This default constructor does nothing but it's still generated by C++.

When you create objects with no initialization information this is the constructor that's called.

Let's take a look at the account class again.

In this account class we've defined no constructors at all.

So C++ will automatically generated default constructor that allows us to create objects with no initialization

information.

Let's see a few examples.

Here we're creating two local objects frank account and Jim account.

The compiler provided default constructor will be used.

Since we didn't provide any constructors at all in the case of a pointer to an object the same thing

happens except that the object is created on the heap since the compiler generated default constructor

does nothing.

The class member attributes of the Account class could contain garbage since they haven't been initialized.

Of course we're free to provide her own user defined no args constructor.

In fact it's best practice to do so in this case.

We're defining our own user to find no args constructor.

This constructor will be called when no initialization information is provided.

And in this constructor we set the account name to none and the account balance is zero.

So we're initializing the account member attributes to values we know about not garbage data.

Now let's see what happens when we define a constructor that expects arguments.

In this case we're defining a constructor that expects a string and a double and we initialize our member

attributes to the values passed into the constructor.

This is very commonly done.

However once we define a constructor for our class C++ will now not generate the no args default constructor

automatically.

If we still need it then we must explicitly define it ourselves.

If you have code that creates objects with no initialization information then that code will no longer

compile since the default constructor is no longer generated by C++.

So in this example we can no longer create account objects with no arguments.

Again since the default constructor is no longer automatically generated by the compiler.

So we'll get three compiler errors when we try to create Frank.

Jim and Mary's account.

However we can still create account objects but we have to use the construct we provided that expects

a string in a double so we can create Bill's account since it provides the initialization information

required by the constructor.

Let's go through some of these examples in the ID.

OK so I'm in the ID.

I'm in the section 13 workspace in the default constructor project and what I've got here is the same

player class that we've been using where we've got the name the health and the XP for a player which

are private.

Instance variables and we've also got a couple of member methods here.

Set name and get name.

That's just the setter in the getter for that name attribute right there.

What's important to understand here is of course how would do the same thing for health or XP.

But I want to clutter up the code I just want to talk about the default constructors here.

You'll notice that this player class has no constructor declared C++ has to have a way to create objects.

So if you don't provide any constructors it will provide a system generated no args constructor that

will allow you to create objects.

So in this case I don't have any constructors declared.

But yet I can be if I can.

I'm able to create player objects with no problem.

I could say Frank-Dodd set name to it say Frank

and I could output the value of Frank's name by using GET name

something real simple like that and what we'll do is we'll walk through this.

We'll step through it using the debugger put a breakpoint right here and we can debug this real quickly.

And we really don't care about the output we just want to see that object so you can see here that I'm

on line 24 and I'm going to instantiate that Frank object which is a player.

There is no constructor so behind the scenes a default no args constructor is generated that does nothing

but it does allow C++ to create that object.

So I'm going to go next here.

At this point Frank is created you can see the object right up appear and I executed the set name which

set the attribute name to Frank.

That's it.

The next date moved obviously printed to the console.

So you can see C++ has to have a way to create these objects if you don't provide a way to initialize

this using any kind of a no args constructor when you get one automatically by the compiler.

That's great.

Now of course I'm going to stop this of course we can create our own.

No args constructor.

So let's do that.

I'll do it down here so it's closer to the main.

So what we can do is we can create our constructor.

There it is it's called player.

Same name as the class.

No args and we'll implement it right here.

Now what's the default behavior I want when I don't provide any initialization information.

Anything reasonable would ever make sense for your application.

In this case let's just say that Mame has none.

Will say that the health is let's say 100

and let's say the XP is 3.

That's it.

That's my initialiser that's also my default initialized.

That's what's important.

This will now be called right here and I'll put a breakpoint right in there so we can see it being called

and we'll debug this again.

And here we go.

What you can see happening is we're right here on line 30 and now when I step through this notice how

it transfers control to line 22 that's exactly what we expected.

We didn't see that before we because we didn't provide a default constructor but now we're providing

one so ours would be called rather than the compiler created one.

And this would just step through and set the properties to name a hundred and three.

Now I'm back here on 931 and you can see right here that we've got none.

103 and now I can change the nun to Frank right here on this line and I'll refresh this.

And you can see here it's Frank right there the string is Frank.

OK.

So there you go.

You don't provide any constructor's you get a default constructor for free if you will.

And if you provide your own default constructor that's the one that will be used.

Now let's do one more thing here.

What happens if you create.

Let me come at this out right here and suppose that I want to create a different constructor an overloaded

constructor so I'm going to say player and I want to provide the name I want to provide all of those

values.

So is my name Val.

I want health

and I want the XP as well.

I want to provide all three of these values and in the body of this constructor I'm just going to say

name equals named Val.

Healthy equals helpful

and XP equals XP though.

OK so that's where we're at now.

We have a bit of a problem now in C++ and this is true of many Object-Oriented languages including Java

and others.

You get that default constructor.

As long as you don't provide any other constructor.

Well what we just did here is we provided a constructor.

In this case this constructor expects three arguments.

Now that compiler generated no args default constructor will no longer be generated.

So this line of code right here on line 35 won't compile anymore.

Let me run the debugger here.

You'll see the error right here it says no matching function call for the no args constructor.

This is perfectly normal.

This is exactly the way it's supposed to work.

The idea being that now you've provided a way to construct your object so C++ will no longer provide

a default way right.

Maybe you don't want a default way so this won't compile.

I'll comment that out and move the breakpoint down to here.

So now the way we need to construct this object is to explicitly call that other constructor.

I'm going to say player Frank will initialize that to Frank 100 and let's say 13 or something.

OK now what's going to happen is when this line executes I feel those break points when this line executes

1:36 what's going to happen is this constructor's going to be called the one that I just created.

So I put a breakpoint there so you can see that happening OK so let's debunk this again walk through

it one more time.

And here we are we're on 9:36.

When I step through it you'll see control will be transferred up to 127 appear.

So there we are.

We're in the constructor now.

So we were explicitly calling that three constructor that we just created.

Remember once I create any kind of constructor the default constructor that's that's automatically generated

won't be generated anymore.

We'll walk through this and when we're done we'll refresh this.

And you can see Frank 113 has been created just as we expected.

Now of course we can create both of these right.

So now I can create let's say a hero object.

So now what we've got is we've got two constructors that we provide.

We provided a no args constructor and we provided this overloaded construct that expects the three arguments.

In this case hero we're not providing any initialization information.

So the no args constructor this guy right here on 9:21 will be called and in the case of Frank.

It'll be just like before this one will be called.

So let's step through that.

And let me do that again.

Put a breakpoint on hero and let's try that one more time and you can see what's happening here is I'm

right here on line 35 so I'm going to construct that hero object and you can see transfers control right

up to here.

So that does no args constructor is being called that's what we expect.

That's our constructor right.

That's not compiler generated because we wrote it ourselves.

So that's going to execute.

Now I come back to Frank and this constructor will be called so you'll see control be transferred here

27 and we'll run through that.

You can see it happening right here on 1:29 that's where I'm at now.

And at this point we've got both those objects constructed and we can see them right here.

There's Frank and there's hero hero uses none 103.

And Frank is using Frank 113.

You see them right here.

OK so that's it.

That's the behavior for default constructors in C++.
